@page "/perfil"
@using System.ComponentModel.DataAnnotations
@using Dominio
@using Interfaz.DTOs
@using Interfaz.ServiciosInterfaz
@using Servicios.Gestores
@inject LogicaSesion Sesion
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject GestorUsuarios GestorUsuarios

@if (Sesion.UsuarioLogueado is not null)
{
    <div class="card shadow border-0 mb-5 mx-auto" style="max-width: 700px;">
        <div class="card-body">
            <div class="mb-4 border-bottom pb-3 d-flex align-items-center">
                <i class="bi bi-person-circle fs-1 text-black me-3"></i>
                <h4 class="mb-0 text-primary-emphasis">Perfil de Usuario</h4>
            </div>

            <dl class="row">
                <dt class="col-sm-4 text-muted">Nombre</dt>
                <dd class="col-sm-8 fw-semibold">@Sesion.UsuarioLogueado?.Nombre</dd>

                <dt class="col-sm-4 text-muted">Apellido</dt>
                <dd class="col-sm-8 fw-semibold">@Sesion.UsuarioLogueado?.Apellido</dd>

                <dt class="col-sm-4 text-muted">Fecha de nacimiento</dt>
                <dd class="col-sm-8 fw-semibold">@Sesion.UsuarioLogueado?.FechaNacimiento.ToShortDateString()</dd>

                <dt class="col-sm-4 text-muted">Email</dt>
                <dd class="col-sm-8 fw-semibold">@Sesion.UsuarioLogueado?.Email</dd>

                <dt class="col-sm-4 text-muted">Roles</dt>
                <dd class="col-sm-8">
                    @if (Sesion.EsAdminSistema())
                    {
                        <span class="badge bg-danger me-1">Administrador de sistema</span>
                    }
                    @if (Sesion.EsAdminProyecto())
                    {
                        <span class="badge bg-info text-dark me-1">Administrador de proyecto</span>
                    }
                    @if (!Sesion.EsAdminSistema() && !Sesion.EsAdminProyecto())
                    {
                        <span class="text-muted">Sin rol administrativo</span>
                    }
                </dd>
            </dl>

            <div class="mt-4 d-flex justify-content-center gap-3">
                <button class="btn btn-outline-dark px-4 py-2 d-flex align-items-center gap-2" style="min-width: 200px;" @onclick="MostrarVentanaEmergenteCambiar">
                    <i class="bi bi-shield-lock"></i> Cambiar contraseña
                </button>
                <button class="btn btn-outline-dark px-4 py-2 d-flex align-items-center gap-2" style="min-width: 200px;" @onclick="MostrarVentanaEmergenteReinciar">
                    <i class="bi bi-arrow-repeat"></i> Reiniciar contraseña
                </button>
            </div>

            <div class="mt-5 d-flex justify-content-between">
                <button class="btn btn-outline-secondary" @onclick="IrAInicio">⬅ Atrás</button>
                <button class="btn btn-outline-danger" @onclick="CerrarSesion">Cerrar sesión</button>
            </div>
        </div>
    </div>
}
<!-- Ventana emergente (modal) para cambiar contraseña -->
<div class="modal fade @(mostrarVentanaEmergenteCambiar ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cambiar Contraseña</h5>
                <button type="button" class="btn-close" @onclick="CerrarVentanaEmergenteCambiar"></button>
            </div>
            <EditForm Model="modeloCambio" OnValidSubmit="CambiarContrasena" OnInvalidSubmit="MostrarErroresValidacion">
                <DataAnnotationsValidator />
                <ValidationSummary class="d-none" />
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(mensaje))
                    {
                        <div class="alert alert-info mt-3">
                            @mensaje
                        </div>
                    }
                    <label for="nuevaContrasena" class="form-label">Nueva Contraseña</label>
                    <InputText id="nuevaContrasena" class="form-control"
                               @bind-Value="modeloCambio.NuevaContrasena"
                               type="password"
                               placeholder="Ingrese su nueva contraseña"/>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Ventana emergente (modal) para reiniciar contraseña -->
<div class="modal fade @(mostrarVentanaEmergenteReinciar ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reiniciar Contraseña</h5>
                <button type="button" class="btn-close" @onclick="CerrarVentanaEmergenteReinciar"></button>
            </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(mensaje))
                    {
                        <div class="alert alert-info mt-3">
                            @mensaje
                        </div>
                    }
                    <button class="btn btn-primary" @onclick="ReiniciarContrasena">Reiniciar Contraseña</button>
                </div>
        </div>
    </div>
</div>



@code {
    private bool sesionCargada = false;
    private bool mostrarVentanaEmergenteCambiar = false;
    private bool mostrarVentanaEmergenteReinciar = false;
    private string mensaje;
    private ModeloCambioContraseña modeloCambio = new ModeloCambioContraseña();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !sesionCargada)
        {
            bool haySesionActiva = await Sesion.HaySesionActiva();

            if (!haySesionActiva)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                StateHasChanged(); // Vuelve a renderizar para mostrar la sesión activa
            }

            sesionCargada = true;
        }
    }
    
    private async Task CerrarSesion()
    {
        await Sesion.LogOut();
        Navigation.NavigateTo("/");
    }

    private void IrAInicio()
    {
        Navigation.NavigateTo("/inicio");
    }

    private void MostrarVentanaEmergenteCambiar()
    {
        mostrarVentanaEmergenteCambiar = true;
        mensaje = String.Empty;
    }

    private void MostrarVentanaEmergenteReinciar()
    {
        mostrarVentanaEmergenteReinciar = true;
        mensaje = String.Empty;
    }

    private void CerrarVentanaEmergenteCambiar()
    {
        mostrarVentanaEmergenteCambiar = false;
    }

    private void CerrarVentanaEmergenteReinciar()
    {
        mostrarVentanaEmergenteReinciar = false;
    }
    
    private async Task CambiarContrasena()
    {
        try
        {
            Usuario usuario = Sesion.UsuarioLogueado;
            GestorUsuarios.ModificarContrasena(usuario, usuario.Id, modeloCambio.NuevaContrasena);
            mensaje = "Contraseña cambiada con éxito.";
            await Sesion.ActualizarSesion();
            modeloCambio = new ModeloCambioContraseña(); // Limpiar el modelo
        }
        catch (Exception e)
        {
            mensaje = $"Error: {e.Message}";
        }
    }

    private void MostrarErroresValidacion(EditContext editContext)
    {
        var errores = editContext.GetValidationMessages();
        mensaje = string.Join("<br/>", errores);
    }

    private async Task ReiniciarContrasena()
    {
        try
        {
            Usuario usuario = Sesion.UsuarioLogueado;
            GestorUsuarios.ReiniciarContrasena(usuario,usuario.Id);
            mensaje = "Contraseña reiniciada con éxito. Se ha enviado una notificación con la nueva contraseña.";
            await Sesion.ActualizarSesion();
        }
        catch (Exception e)
        {
            mensaje = $"Error: {e.Message}";
        }
    }

}