@page "/RecursosGenerales"
@rendermode InteractiveServer
@inject ServiciosInterfaz.UsuarioActual UsuarioActual
@inject GestorRecursos GestorRecursos
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Dominio.Excepciones
@using Dominio
@using Servicios.Gestores


<h3>Recursos Generales</h3>

@if (UsuarioActual.UsuarioLogueado.EsAdministradorSistema)
{
    <button class="btn btn-primary mb-3" @onclick="MostrarFormularioCrearRecurso">
        <i class="bi bi-plus-circle"></i> Crear recurso
    </button>
}
@if (mostrarError)
{
    <div class="alert alert-danger" role="alert">
        @errorMensaje
    </div>
}
@if (mostrarFormCrearRecurso)
{
    <EditForm Model="nuevoRecurso" OnValidSubmit="CrearRecurso">
        <DataAnnotationsValidator />
        <div class="card mb-4">
            <div class="card-header">
                <strong>Nuevo Recurso</strong>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label>Nombre</label>
                    <InputText class="form-control" @bind-Value="nuevoRecurso.Nombre" @oninput="OcultarError"/>
                </div>
                <div class="mb-3">
                    <label>Tipo</label>
                    <InputText class="form-control" @bind-Value="nuevoRecurso.Tipo" @oninput="OcultarError"/>
                </div>
                <div class="mb-3">
                    <label>Descripción</label>
                    <InputText class="form-control" @bind-Value="nuevoRecurso.Descripcion" @oninput="OcultarError"></InputText>
                </div>
                <button class="btn btn-success" @onclick="CrearRecurso">Guardar</button>
                <button class="btn btn-secondary ms-2" @onclick="CancelarCrearRecurso">Cancelar</button>
            </div>
        </div>
    </EditForm>
}

@if (mostrarErrorEditar)
{
    <div class="alert alert-danger" role="alert">
        @errorMensajeEditar
    </div>
}
@if (mostrarFormEditarRecurso)
{
    <EditForm Model="recursoAEditar" OnValidSubmit="GuardarCambiosRecurso">
        <DataAnnotationsValidator />
        <div class="card mb-4">
            <div class="card-header">
                <strong>Editar Recurso</strong> 
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label>Nombre</label>
                    <InputText class="form-control" @bind-Value="recursoAEditar.Nombre" @oninput="OcultarErrorEditar" />
                </div>
                <div class="mb-3">
                    <label>Tipo</label>
                    <InputText class="form-control" @bind-Value="recursoAEditar.Tipo" @oninput="OcultarErrorEditar" />
                </div>
                <div class="mb-3">
                    <label>Descripción</label>
                    <InputText class="form-control" @bind-Value="recursoAEditar.Descripcion" @oninput="OcultarErrorEditar" />
                </div>
                <button class="btn btn-success" @onclick="GuardarCambiosRecurso">Guardar Cambios</button>
                <button class="btn btn-secondary ms-2" type="button" @onclick="CancelarEdicionRecurso">Cancelar</button>
            </div>
        </div>
    </EditForm>
}


@if (GestorRecursos.ObtenerRecursosGenerales().Count == 0)
{
    <p>No hay recursos disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Nombre</th>
            <th>Tipo</th>
            <th>Descripción</th>
            @if (UsuarioActual.UsuarioLogueado.EsAdministradorSistema)
            {
                <th></th>
                <th></th>
            }
        </tr>
        </thead>
        <tbody>
        @foreach (Recurso recurso in GestorRecursos.ObtenerRecursosGenerales())
        {
            <tr>
                <td>@recurso.Nombre</td>
                <td>@recurso.Tipo</td>
                <td>@recurso.Descripcion</td>
                @if (UsuarioActual.UsuarioLogueado.EsAdministradorSistema)
                {
                    <td>
                        <button class="btn btn-sm btn-secondary" @onclick="() => EditarRecurso(recurso.Id)">
                            <i class="bi bi-pencil"></i>
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-secondary" @onclick="() => EliminarRecurso(recurso.Id)">
                            <i class="bi bi-trash3"></i>
                        </button>
                    </td>
                }
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool mostrarFormCrearRecurso = false;
    private bool mostrarError = false;
    private string errorMensaje;
    private RecursoDTO nuevoRecurso = new RecursoDTO();
    private bool mostrarFormEditarRecurso = false;
    private RecursoDTO recursoAEditar = new RecursoDTO();
    private int idRecursoAEditar;
    private bool mostrarErrorEditar = false;
    private string errorMensajeEditar;



    private void MostrarFormularioCrearRecurso()
    {
        mostrarFormCrearRecurso = true;
        nuevoRecurso = new RecursoDTO();
    }

    private void CancelarCrearRecurso()
    {
        mostrarFormCrearRecurso = false;
        mostrarError = false;
    }

    private void CrearRecurso()
    {
        mostrarError = false;
        errorMensaje = "";

        var errores = ValidarModelo(nuevoRecurso);
        if (errores.Any())
        {
            errorMensaje = string.Join(" ", errores.Select(e => e.ErrorMessage));
            mostrarError = true;
            return;
        }

        try
        {
            Recurso nuevo = new Recurso(nuevoRecurso.Nombre, nuevoRecurso.Tipo, nuevoRecurso.Descripcion);
            GestorRecursos.AgregarRecurso(UsuarioActual.UsuarioLogueado, nuevo);
            mostrarFormCrearRecurso = false;
            mostrarError = false;
        }
        catch (ExcepcionDominio ex)
        {
            errorMensaje = $"Error al crear recurso: {ex.Message}";
            mostrarError = true;
        }
        catch (Exception ex)
        {
            errorMensaje = "Ocurrió un error inesperado al crear el recurso.";
            mostrarError = true;
        }
    }

    private void OcultarError(ChangeEventArgs e)
    {
        mostrarError = false;
    }

    private List<ValidationResult> ValidarModelo(object modelo)
    {
        var resultados = new List<ValidationResult>();
        var contexto = new ValidationContext(modelo, serviceProvider: null, items: null);
        Validator.TryValidateObject(modelo, contexto, resultados, validateAllProperties: true);
        return resultados;
    }

    private void EditarRecurso(int idRecurso)
    {
        var recurso = GestorRecursos.ObtenerRecursosGenerales().FirstOrDefault(r => r.Id == idRecurso);
        if (recurso != null)
        {
            recursoAEditar = new RecursoDTO
            {
                Id = recurso.Id,
                Nombre = recurso.Nombre,
                Tipo = recurso.Tipo,
                Descripcion = recurso.Descripcion
            };
            idRecursoAEditar = recurso.Id;
            mostrarFormEditarRecurso = true;
        }
    }

    private void GuardarCambiosRecurso()
    {
        mostrarErrorEditar = false;
        errorMensajeEditar = "";

        var errores = ValidarModelo(recursoAEditar);
        if (errores.Any())
        {
            errorMensajeEditar = string.Join(" ", errores.Select(e => e.ErrorMessage));
            mostrarErrorEditar = true;
            return;
        }

        try
        {
            GestorRecursos.ModificarNombreRecurso(UsuarioActual.UsuarioLogueado, recursoAEditar.Id, recursoAEditar.Nombre);
            GestorRecursos.ModificarTipoRecurso(UsuarioActual.UsuarioLogueado, recursoAEditar.Id, recursoAEditar.Tipo);
            GestorRecursos.ModificarDescripcionRecurso(UsuarioActual.UsuarioLogueado, recursoAEditar.Id, recursoAEditar.Descripcion);

            mostrarFormEditarRecurso = false;
            recursoAEditar = null;
        }
        catch (ExcepcionDominio ex)
        {
            errorMensajeEditar = $"Error al editar recurso: {ex.Message}";
            mostrarErrorEditar = true;
        }
        catch (Exception)
        {
            errorMensajeEditar = "Ocurrió un error inesperado al editar el recurso.";
            mostrarErrorEditar = true;
        }
    }

    private void CancelarEdicionRecurso()
    {
        mostrarFormEditarRecurso = false;
        mostrarErrorEditar = false;
    }

    private void OcultarErrorEditar(ChangeEventArgs e)
    {
        mostrarErrorEditar = false;
    }

    private void EliminarRecurso(int idRecurso)
    {
        GestorRecursos.EliminarRecurso(UsuarioActual.UsuarioLogueado, idRecurso);
    }

    public class RecursoDTO
    {
        public int Id { get; set; }
        
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        public string Nombre { get; set; }
        
        [Required(ErrorMessage = "El tipo es obligatorio.")]
        public string Tipo { get; set; }
        
        [Required(ErrorMessage = "La descripción es obligatoria.")]
        public string Descripcion { get; set; }
    }

    
}
