@using Dominio
@using Interfaz.ServiciosInterfaz
@using Servicios.Gestores
@inject LogicaSesion Sesion
@inject NavigationManager Navigation
@inject GestorProyectos GestorProyectos
@rendermode InteractiveServer
@implements IDisposable


@if (Sesion.UsuarioLogueado is not null)
{
    @if (Sesion.EsAdminSistema())
    {
        proyectos = GestorProyectos.Proyectos.ObtenerTodos();
    }
    else
    {
        proyectos = GestorProyectos.ObtenerProyectosPorUsuario(Sesion.UsuarioLogueado.Id);   
    }
    foreach (var proyecto in proyectos)
    {
        <details class="mb-2 proyecto-details">
            <summary class="proyecto-summary">
                @if (proyecto.EsAdministrador(Sesion.UsuarioLogueado))
                {
                    <i class="bi bi-star-fill text-white me-1" title="Administrador del proyecto"></i>
                }
                @proyecto.Nombre
            </summary>
            <ul class="list-unstyled ms-3">
                <li><NavLink href="@($"/proyecto/{proyecto.Id}/diagrama_de_gantt")" class="nav-link link-sidebar">Gantt</NavLink></li>
                <li><NavLink href="@($"/proyecto/{proyecto.Id}/tareas")" class="nav-link link-sidebar">Tareas</NavLink></li>
                <li><NavLink href="@($"/proyecto/{proyecto.Id}/recursos_exclusivos")" class="nav-link link-sidebar text-nowrap">Recursos Exclusivos</NavLink></li>
                <li><NavLink href="@($"/proyecto/{proyecto.Id}/miembros")" class="nav-link link-sidebar">Miembros</NavLink></li>
                @if (proyecto.EsAdministrador(Sesion.UsuarioLogueado))
                {
                    <li><NavLink href="@($"/proyecto/{proyecto.Id}/editar")" class="nav-link link-sidebar">Editar</NavLink></li>
                }
                <li><NavLink href="@($"/informacion/proyecto/{proyecto.Id}")" class="nav-link link-sidebar">Información</NavLink></li>
            </ul>
        </details>
    }
}

<style>
    .proyecto-details {
        color: #f5f1ed;
        background-color: transparent;
        border-radius: 0.25rem;
        padding: 0.25rem 0.5rem;
    }

    .proyecto-summary {
        cursor: pointer;
        color: #f5f1ed;
        font-weight: 500;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        transition: background-color 0.2s ease-in-out;
    }

    .proyecto-summary:hover {
        background-color: #70798c;
    }

    .link-sidebar {
        color: #f5f1ed;
        margin-bottom: 0.25rem;
        transition: background-color 0.2s ease-in-out;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
    }

    .link-sidebar:hover,
    .link-sidebar.active {
        background-color: #70798c;
        color: #f5f1ed;
        text-decoration: none;
    }
</style>

@code {
    private List<Proyecto> proyectos;
    private bool sesionCargada = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !sesionCargada)
        {
            bool haySesionActiva = await Sesion.HaySesionActiva();

            if (!haySesionActiva)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                await Sesion.ActualizarSesion();
                sesionCargada = true;
                StateHasChanged(); // Vuelve a renderizar para mostrar la sesión activa
            }
        }
    }
    
    protected override void OnInitialized()
    {
        Sesion.SesionModificada += RefrescarLayout;
    }

    private void RefrescarLayout()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Sesion.SesionModificada -= RefrescarLayout;
    }

}