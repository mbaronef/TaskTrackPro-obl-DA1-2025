// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositorios;

#nullable disable

namespace Repositorios.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20250618064301_migracionBDD")]
    partial class migracionBDD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dominio.Dependencia", b =>
                {
                    b.Property<int>("TareaDuenaId")
                        .HasColumnType("int");

                    b.Property<int>("TareaId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("TareaDuenaId", "TareaId", "Tipo");

                    b.HasIndex("TareaId");

                    b.ToTable("Dependencia", t =>
                        {
                            t.HasCheckConstraint("CK_Dependencia_Tipo", "[Tipo] IN ('SS', 'FS')");
                        });
                });

            modelBuilder.Entity("Dominio.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificacion");
                });

            modelBuilder.Entity("Dominio.Proyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdministradorId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("FechaFinMasTemprana")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LiderId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId")
                        .IsUnique();

                    b.HasIndex("LiderId");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("Dominio.RangoDeUso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadDeUsos")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecursoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecursoId");

                    b.ToTable("RangoDeUso");
                });

            modelBuilder.Entity("Dominio.Recurso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantidadDeTareasUsandolo")
                        .HasColumnType("int");

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProyectoAsociadoId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoAsociadoId");

                    b.ToTable("Recursos");
                });

            modelBuilder.Entity("Dominio.RecursoNecesario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("RecursoId")
                        .HasColumnType("int");

                    b.Property<int?>("TareaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecursoId");

                    b.HasIndex("TareaId");

                    b.ToTable("RecursoNecesario");
                });

            modelBuilder.Entity("Dominio.Tarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionEnDias")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaDeEjecucion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFinMasTemprana")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FechaInicioFijadaManualmente")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaInicioMasTemprana")
                        .HasColumnType("datetime2");

                    b.Property<int>("Holgura")
                        .HasColumnType("int");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Tarea", t =>
                        {
                            t.HasCheckConstraint("CK_Tarea_DuracionMayorACero", "[DuracionEnDias] > 0");
                        });
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CantidadProyectosAsignados")
                        .HasColumnType("int");

                    b.Property<int>("CantidadProyectosLiderando")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EsAdministradorProyecto")
                        .HasColumnType("bit");

                    b.Property<bool>("EsAdministradorSistema")
                        .HasColumnType("bit");

                    b.Property<bool>("EsLider")
                        .HasColumnType("bit");

                    b.Property<bool>("EstaAdministrandoUnProyecto")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_contrasenaEncriptada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContrasenaEncriptada");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Sistema",
                            CantidadProyectosAsignados = 0,
                            CantidadProyectosLiderando = 0,
                            Email = "admin@sistema.com",
                            EsAdministradorProyecto = false,
                            EsAdministradorSistema = true,
                            EsLider = false,
                            EstaAdministrandoUnProyecto = false,
                            FechaNacimiento = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "Admin",
                            _contrasenaEncriptada = "$2a$11$rETn6ehXRfL3VZXDRdYhl.FgjgSovJngdXlIuzOL/B5kMx8y6Z4/S"
                        });
                });

            modelBuilder.Entity("ProyectoUsuario", b =>
                {
                    b.Property<int>("MiembrosId")
                        .HasColumnType("int");

                    b.Property<int>("ProyectoId")
                        .HasColumnType("int");

                    b.HasKey("MiembrosId", "ProyectoId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("ProyectoUsuario");
                });

            modelBuilder.Entity("TareaUsuario", b =>
                {
                    b.Property<int>("TareaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosAsignadosId")
                        .HasColumnType("int");

                    b.HasKey("TareaId", "UsuariosAsignadosId");

                    b.HasIndex("UsuariosAsignadosId");

                    b.ToTable("TareaUsuario");
                });

            modelBuilder.Entity("Dominio.Dependencia", b =>
                {
                    b.HasOne("Dominio.Tarea", null)
                        .WithMany("Dependencias")
                        .HasForeignKey("TareaDuenaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Tarea", "Tarea")
                        .WithMany()
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tarea");
                });

            modelBuilder.Entity("Dominio.Notificacion", b =>
                {
                    b.HasOne("Dominio.Usuario", null)
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Proyecto", b =>
                {
                    b.HasOne("Dominio.Usuario", "Administrador")
                        .WithOne()
                        .HasForeignKey("Dominio.Proyecto", "AdministradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Usuario", "Lider")
                        .WithMany()
                        .HasForeignKey("LiderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Administrador");

                    b.Navigation("Lider");
                });

            modelBuilder.Entity("Dominio.RangoDeUso", b =>
                {
                    b.HasOne("Dominio.Recurso", null)
                        .WithMany("RangosEnUso")
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dominio.Recurso", b =>
                {
                    b.HasOne("Dominio.Proyecto", "ProyectoAsociado")
                        .WithMany()
                        .HasForeignKey("ProyectoAsociadoId");

                    b.Navigation("ProyectoAsociado");
                });

            modelBuilder.Entity("Dominio.RecursoNecesario", b =>
                {
                    b.HasOne("Dominio.Recurso", "Recurso")
                        .WithMany()
                        .HasForeignKey("RecursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dominio.Tarea", null)
                        .WithMany("RecursosNecesarios")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Recurso");
                });

            modelBuilder.Entity("Dominio.Tarea", b =>
                {
                    b.HasOne("Dominio.Proyecto", null)
                        .WithMany("Tareas")
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoUsuario", b =>
                {
                    b.HasOne("Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("MiembrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Proyecto", null)
                        .WithMany()
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TareaUsuario", b =>
                {
                    b.HasOne("Dominio.Tarea", null)
                        .WithMany()
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosAsignadosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Proyecto", b =>
                {
                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("Dominio.Recurso", b =>
                {
                    b.Navigation("RangosEnUso");
                });

            modelBuilder.Entity("Dominio.Tarea", b =>
                {
                    b.Navigation("Dependencias");

                    b.Navigation("RecursosNecesarios");
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Navigation("Notificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
